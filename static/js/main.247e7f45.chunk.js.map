{"version":3,"sources":["components/Scoreboard/Scoreboard.module.css","components/Settings/SettingsScoreboard/SettingsScoreboard.module.css","components/Counter/Counter.module.css","components/Button/Button.module.css","components/Settings/Settings.module.css","components/Settings/Input/Input.module.css","components/Scoreboard/Scoreboard.tsx","components/Button/Button.tsx","components/Counter/Counter.tsx","components/Settings/Input/Input.tsx","components/Settings/SettingsScoreboard/SettingsScoreboard.tsx","components/Settings/Settings.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Scoreboard","number","maxNum","message","errorText","error","s","textError","text","className","scoreboard","max","textScoreboard","Button","name","callBack","disabled","onClick","btn","notActive","Counter","changeNumber","resetNumber","minNum","disabledCounter","counter","buttonsWrapper","Input","value","inputError","input","type","onChange","e","Number","currentTarget","SettingsScoreboard","changeValueMax","changeValueMin","settingsScoreboard","settingsValue","Settings","changeStartValue","disabledSettings","settings","App","useState","setNumber","settingsMax","setSettingsMax","settingsMin","setSettingsMin","setMessage","setDisabledCounter","setDisabledSettings","correctText","useEffect","startValue","localStorage","getItem","maxValue","JSON","parse","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2FACAA,EAAOC,QAAU,CAAC,WAAa,+BAA+B,IAAM,wBAAwB,eAAiB,mCAAmC,KAAO,yBAAyB,UAAY,gC,gBCA5LD,EAAOC,QAAU,CAAC,mBAAqB,+CAA+C,cAAgB,4C,iBCAtGD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,eAAiB,kC,gBCAtED,EAAOC,QAAU,CAAC,IAAM,oBAAoB,UAAY,4B,gBCAxDD,EAAOC,QAAU,CAAC,SAAW,2BAA2B,eAAiB,mC,gBCAzED,EAAOC,QAAU,CAAC,MAAQ,qBAAqB,WAAa,4B,wLCS/CC,EAA4C,SAAC,GAG/C,IADHC,EACE,EADFA,OAAQC,EACN,EADMA,OAAQC,EACd,EADcA,QAASC,EACvB,EADuBA,UAGzBC,GAFE,yDAEMF,IAAYC,EAAYE,IAAEC,UAAYD,IAAEE,MAEpD,OACI,qBAAKC,UAAWH,IAAEI,WAAlB,SACE,sBAAMD,UAAWR,IAAWC,EAASI,IAAEK,IAAM,GAA7C,SAEOR,EACM,sBAAMM,UAAS,UAAKH,IAAEM,eAAP,YAAyBP,GAAxC,SACGF,IAEHF,O,gBChBVY,EAAoC,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,SAAUC,EAAwB,EAAxBA,SAAwB,8CAMvF,OACI,wBAAQA,SAAUA,EACVC,QANS,WACjBF,KAMQN,UAAS,UAAKH,IAAEY,IAAP,YAAcF,EAAWV,IAAEa,UAAY,IAFxD,SAIKL,KCJAM,EAAsC,SAAC,GAKzC,IAHHnB,EAGE,EAHFA,OAAQoB,EAGN,EAHMA,aAAcC,EAGpB,EAHoBA,YACtBpB,EAEE,EAFFA,OAAQqB,EAEN,EAFMA,OAAQpB,EAEd,EAFcA,QAASqB,EAEvB,EAFuBA,gBACzBpB,EACE,EADFA,UACE,iHAGN,OACI,sBAAKK,UAAWH,IAAEmB,QAAlB,UACI,cAAC,EAAD,CAAYxB,OAAQA,EAAQC,OAAQA,EAAQC,QAASA,EAASC,UAAWA,IACzE,sBAAKK,UAAWH,IAAEoB,eAAlB,UACI,cAAC,EAAD,CAAQV,SAAUQ,GAAmBtB,IAAWD,EAAQa,KAAM,MAAQC,SAAUM,IAChF,cAAC,EAAD,CAAQL,SAAUQ,GAAmBvB,IAAWsB,EAAQT,KAAM,QAAUC,SAAUO,W,iDCnBrFK,EAAkC,SAAC,GAA2C,IAA1CxB,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,UAAWwB,EAAqB,EAArBA,MAAOb,EAAc,EAAdA,SAEpEV,EAAQF,IAAYC,EAAYE,IAAEuB,WAAa,GAMnD,OACI,uBAAOpB,UAAS,UAAKH,IAAEwB,MAAP,YAAgBzB,GAAS0B,KAAK,SAASH,MAAOA,EAAOI,SALzC,SAACC,GAC7BlB,EAASmB,OAAOD,EAAEE,cAAcP,YCF3BQ,EAA4D,SAAC,GAI/D,IAFHC,EAEE,EAFFA,eAAgBC,EAEd,EAFcA,eAAgBpC,EAE9B,EAF8BA,OAAQqB,EAEtC,EAFsCA,OACxCpB,EACE,EADFA,QAASC,EACP,EADOA,UAYb,OACI,sBAAKK,UAAWH,IAAEiC,mBAAlB,UACI,sBAAK9B,UAAWH,IAAEkC,cAAlB,UACI,8CACA,cAAC,EAAD,CACIrC,QAASA,EACTC,UAAWA,EACXwB,MAAO1B,EACPa,SAhBsB,SAACa,GACnCS,EAAeT,SAkBX,sBAAKnB,UAAWH,IAAEkC,cAAlB,UACI,gDACA,cAAC,EAAD,CACIrC,QAASA,EACTC,UAAWA,EACXwB,MAAOL,EACPR,SAtBsB,SAACa,GACnCU,EAAeV,aCRVa,EAAuC,SAAC,GAI1C,IAFHJ,EAEE,EAFFA,eAAgBC,EAEd,EAFcA,eAAgBI,EAE9B,EAF8BA,iBAAkBxC,EAEhD,EAFgDA,OAClDqB,EACE,EADFA,OAAQoB,EACN,EADMA,iBAAkBxC,EACxB,EADwBA,QAASC,EACjC,EADiCA,UAGvC,OACI,sBAAKK,UAAWH,IAAEsC,SAAlB,UACI,cAAC,EAAD,CACIP,eAAgBA,EAChBC,eAAgBA,EAChBpC,OAAQA,EACRqB,OAAQA,EACRpB,QAASA,EACTC,UAAWA,IAEf,qBAAKK,UAAWH,IAAEoB,eAAlB,SACI,cAAC,EAAD,CAAQZ,KAAM,MAAOC,SAAU2B,EAAkB1B,SAAU2B,UC4F5DE,MAvHf,WAAgB,IAAD,EAEiBC,mBAAS,GAF1B,mBAEJ7C,EAFI,KAEI8C,EAFJ,OAG2BD,mBAAS,GAHpC,mBAGJE,EAHI,KAGSC,EAHT,OAI2BH,mBAAS,GAJpC,mBAIJI,EAJI,KAISC,EAJT,OAKmBL,mBAAS,IAL5B,mBAKJ3C,EALI,KAKKiD,EALL,OAMmCN,oBAAS,GAN5C,mBAMJtB,EANI,KAMa6B,EANb,OAOqCP,oBAAS,GAP9C,mBAOJH,EAPI,KAOcW,EAPd,KAYPpD,EAAS8C,EACTzB,EAAS2B,EACT9C,EAAY,kBACZmD,EAAc,8BAwElB,OAtEAC,qBAAU,WACN,IAAIC,EAAaC,aAAaC,QAAQ,cAClCC,EAAWF,aAAaC,QAAQ,YAChCxD,EAAUuD,aAAaC,QAAQ,WAE/BF,IACAN,EAAeU,KAAKC,MAAML,IACtBtD,IAAYC,GACZgD,EAAWjD,GACXkD,GAAmB,KAGnBN,EAAUc,KAAKC,MAAML,IACrBJ,GAAmB,KAIvBO,GACAX,EAAeY,KAAKC,MAAMF,MAE/B,IAEHJ,qBAAU,WACNE,aAAaK,QAAQ,UAAW5D,GAChCuD,aAAaK,QAAQ,WAAYF,KAAKG,UAAU9D,IAChDwD,aAAaK,QAAQ,aAAcF,KAAKG,UAAUzC,MACnD,CAACyB,EAAaE,EAAa/C,IA6C1B,qBAAKM,UAAU,UAAf,SACI,qBAAKA,UAAU,YAAf,SACI,sBAAKA,UAAU,cAAf,UACI,cAAC,EAAD,CACI4B,eA9CG,SAACT,GAEhBA,EAAQ,GAAKA,IAAUL,GAAUA,EAASK,GAC1C0B,GAAoB,GACpBD,GAAmB,GACnBD,EAAWhD,KAGXkD,GAAoB,GACpBF,EAAWG,GACXF,GAAmB,IAGvBJ,EAAerB,IAkCCU,eA/BG,SAACV,GAEhBA,EAAQ,GAAKA,IAAU1B,GAAUA,EAAS0B,GAC1C0B,GAAoB,GACpBD,GAAmB,GACnBD,EAAWhD,KAGXkD,GAAoB,GACpBF,EAAWG,GACXF,GAAmB,IAGvBF,EAAevB,IAmBCc,iBAfK,WACrBK,EAAUG,GACVE,EAAW,IACXC,GAAmB,GACnBC,GAAoB,IAYJpD,OAAQA,EACRqB,OAAQA,EACRoB,iBAAkBA,EAClBxC,QAASA,EACTC,UAAWA,IAIf,cAAC,EAAD,CACIoB,gBAAiBA,EACjBrB,QAASA,EACTF,OAAQA,EACRoB,aAlGC,kBAAM0B,EAAU9C,EAAS,IAmG1BqB,YAlGA,kBAAMyB,EAAUG,IAmGhBhD,OAAQA,EACRqB,OAAQA,EACRnB,UAAWA,YCvGpB6D,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.247e7f45.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"scoreboard\":\"Scoreboard_scoreboard__2Kb2W\",\"max\":\"Scoreboard_max__3WbVK\",\"textScoreboard\":\"Scoreboard_textScoreboard__2CnWA\",\"text\":\"Scoreboard_text__3U2wL\",\"textError\":\"Scoreboard_textError__3PGOc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsScoreboard\":\"SettingsScoreboard_settingsScoreboard__3NcLV\",\"settingsValue\":\"SettingsScoreboard_settingsValue__1M-8J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"counter\":\"Counter_counter__2NYQn\",\"buttonsWrapper\":\"Counter_buttonsWrapper__1revE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"Button_btn__2XFKb\",\"notActive\":\"Button_notActive__1o0z6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"settings\":\"Settings_settings__1gQfX\",\"buttonsWrapper\":\"Settings_buttonsWrapper__C25OE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Input_input__3eMbZ\",\"inputError\":\"Input_inputError__3U1A7\"};","import React from \"react\";\r\nimport s from './Scoreboard.module.css';\r\n\r\ntype ScoreboardPropsType = {\r\n    number: number\r\n    maxNum: number\r\n    message: string\r\n    errorText: string\r\n}\r\n\r\nexport const Scoreboard: React.FC<ScoreboardPropsType> = (\r\n    {\r\n        number, maxNum, message, errorText, ...props\r\n    }) => {\r\n\r\n    let error = message === errorText ? s.textError : s.text\r\n\r\n    return (\r\n        <div className={s.scoreboard}>\r\n          <span className={number === maxNum ? s.max : ''}>\r\n             {\r\n                 message\r\n                     ? <span className={`${s.textScoreboard} ${error}`}>\r\n                         {message}\r\n                       </span>\r\n                     : number\r\n             }\r\n          </span>\r\n        </div>\r\n    );\r\n}","import React, {useState} from \"react\";\r\nimport s from './Button.module.css';\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    callBack: () => void\r\n    disabled: boolean\r\n}\r\n\r\nexport const Button: React.FC<ButtonPropsType> = ({name, callBack, disabled, ...props}) => {\r\n\r\n    const clickHandler = () => {\r\n        callBack();\r\n    }\r\n\r\n    return (\r\n        <button disabled={disabled}\r\n                onClick={clickHandler}\r\n                className={`${s.btn} ${disabled ? s.notActive : ''}`}\r\n        >\r\n            {name}\r\n        </button>\r\n    );\r\n}","import React, {useState} from \"react\";\r\nimport s from './Counter.module.css';\r\nimport {Scoreboard} from \"../Scoreboard/Scoreboard\";\r\nimport {Button} from \"../Button/Button\";\r\n\r\ntype CounterPropsType = {\r\n    number: number\r\n    changeNumber: () => void\r\n    resetNumber: () => void\r\n    maxNum: number\r\n    minNum: number\r\n    message: string\r\n    disabledCounter: boolean\r\n    errorText: string\r\n}\r\n\r\nexport const Counter: React.FC<CounterPropsType> = (\r\n    {\r\n        number, changeNumber, resetNumber,\r\n        maxNum, minNum, message, disabledCounter,\r\n        errorText, ...props\r\n    }) => {\r\n\r\n\r\n    return (\r\n        <div className={s.counter}>\r\n            <Scoreboard number={number} maxNum={maxNum} message={message} errorText={errorText}/>\r\n            <div className={s.buttonsWrapper}>\r\n                <Button disabled={disabledCounter || maxNum === number} name={'inc'}  callBack={changeNumber}/>\r\n                <Button disabled={disabledCounter || number === minNum} name={'reset'}  callBack={resetNumber}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from './Input.module.css'\r\n\r\ntype InputPropsType = {\r\n    message: string\r\n    errorText: string\r\n    value: number\r\n    callBack: (value: number) => void\r\n}\r\n\r\nexport const Input: React.FC<InputPropsType> = ({message, errorText, value, callBack}) => {\r\n\r\n    let error = message === errorText ? s.inputError : '';\r\n\r\n    const onChangeHandlerForInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        callBack(Number(e.currentTarget.value));\r\n    }\r\n\r\n    return (\r\n        <input className={`${s.input} ${error}`} type=\"number\" value={value} onChange={onChangeHandlerForInput}/>\r\n    );\r\n}","import React, {ChangeEvent} from \"react\";\r\nimport s from './SettingsScoreboard.module.css';\r\nimport {Input} from \"../Input/Input\";\r\n\r\ntype SettingsScoreboardPropsType = {\r\n    changeValueMax: (value: number) => void\r\n    changeValueMin: (value: number) => void\r\n    maxNum: number\r\n    minNum: number\r\n    message: string\r\n    errorText: string\r\n}\r\n\r\nexport const SettingsScoreboard: React.FC<SettingsScoreboardPropsType> = (\r\n    {\r\n        changeValueMax, changeValueMin, maxNum, minNum,\r\n        message, errorText\r\n    }) => {\r\n\r\n\r\n    const changeValueMaxForInputHandler = (value: number) => {\r\n        changeValueMax(value);\r\n    }\r\n    const changeValueMinForInputHandler = (value: number) => {\r\n        changeValueMin(value);\r\n    }\r\n\r\n\r\n    return (\r\n        <div className={s.settingsScoreboard}>\r\n            <div className={s.settingsValue}>\r\n                <span>max value:</span>\r\n                <Input\r\n                    message={message}\r\n                    errorText={errorText}\r\n                    value={maxNum}\r\n                    callBack={changeValueMaxForInputHandler}\r\n                />\r\n            </div>\r\n            <div className={s.settingsValue}>\r\n                <span>start value:</span>\r\n                <Input\r\n                    message={message}\r\n                    errorText={errorText}\r\n                    value={minNum}\r\n                    callBack={changeValueMinForInputHandler}\r\n                />\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React from \"react\";\r\nimport s from './Settings.module.css';\r\nimport {Button} from \"../Button/Button\";\r\nimport {SettingsScoreboard} from \"./SettingsScoreboard/SettingsScoreboard\";\r\n\r\ntype SettingPropsType = {\r\n    changeValueMax: (value: number) => void\r\n    changeValueMin: (value: number) => void\r\n    changeStartValue: () => void\r\n    maxNum: number\r\n    minNum: number\r\n    disabledSettings: boolean\r\n    message: string\r\n    errorText: string\r\n}\r\n\r\nexport const Settings: React.FC<SettingPropsType> = (\r\n    {\r\n        changeValueMax, changeValueMin, changeStartValue, maxNum,\r\n        minNum, disabledSettings, message, errorText\r\n    }) => {\r\n\r\n    return (\r\n        <div className={s.settings}>\r\n            <SettingsScoreboard\r\n                changeValueMax={changeValueMax}\r\n                changeValueMin={changeValueMin}\r\n                maxNum={maxNum}\r\n                minNum={minNum}\r\n                message={message}\r\n                errorText={errorText}\r\n            />\r\n            <div className={s.buttonsWrapper}>\r\n                <Button name={'set'} callBack={changeStartValue} disabled={disabledSettings}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./components/Counter/Counter\";\nimport {Settings} from \"./components/Settings/Settings\";\nimport s from \"./components/Settings/SettingsScoreboard/SettingsScoreboard.module.css\";\n\nfunction App() {\n\n    const [number, setNumber] = useState(0); // State для счетчика\n    const [settingsMax, setSettingsMax] = useState(1); // максимальное число\n    const [settingsMin, setSettingsMin] = useState(0); // минимальное число\n    const [message, setMessage] = useState(''); // State для текста\n    const [disabledCounter, setDisabledCounter] = useState(true); // disabled для кнопок счетчика\n    const [disabledSettings, setDisabledSettings] = useState(true) // disabled для кнопок настроек\n\n    const changeNumber = () => setNumber(number + 1); // функция изменения State для счетчика\n    const resetNumber = () => setNumber(settingsMin) // функция для сброса счетчика\n\n    let maxNum = settingsMax; // максимальное число\n    let minNum = settingsMin; // минимальное число\n    let errorText = 'Incorrect value'; // текст для ошибка\n    let correctText = \"enter value and press 'set'\"; // текст для корректного ввода\n\n    useEffect(() => {\n        let startValue = localStorage.getItem('startValue');\n        let maxValue = localStorage.getItem('maxValue');\n        let message = localStorage.getItem('message');\n\n        if (startValue) {\n            setSettingsMin(JSON.parse(startValue));\n            if (message === errorText) {\n                setMessage(message)\n                setDisabledCounter(true);\n            }\n            else {\n                setNumber(JSON.parse(startValue));\n                setDisabledCounter(false);\n            }\n        }\n\n        if (maxValue) {\n            setSettingsMax(JSON.parse(maxValue));\n        }\n    }, [])\n\n    useEffect(() => {\n        localStorage.setItem('message', message)\n        localStorage.setItem('maxValue', JSON.stringify(maxNum));\n        localStorage.setItem('startValue', JSON.stringify(minNum));\n    }, [settingsMax, settingsMin, message]);\n\n\n    const changeValueMax = (value: number) => {\n\n        if (value < 0 || value === minNum || minNum > value) {\n            setDisabledSettings(true);\n            setDisabledCounter(true);\n            setMessage(errorText)\n        }\n        else {\n            setDisabledSettings(false);\n            setMessage(correctText)\n            setDisabledCounter(true);\n        }\n\n        setSettingsMax(value)\n    };\n\n    const changeValueMin = (value: number) => {\n\n        if (value < 0 || value === maxNum || maxNum < value) {\n            setDisabledSettings(true);\n            setDisabledCounter(true);\n            setMessage(errorText)\n        }\n        else {\n            setDisabledSettings(false);\n            setMessage(correctText)\n            setDisabledCounter(true);\n        }\n\n        setSettingsMin(value);\n\n    };\n\n    const changeStartValue = () => {\n        setNumber(settingsMin);\n        setMessage('');\n        setDisabledCounter(false);\n        setDisabledSettings(true);\n    }\n\n\n    return (\n        <div className=\"wrapper\">\n            <div className=\"container\">\n                <div className=\"wrapperFlex\">\n                    <Settings\n                        changeValueMax={changeValueMax}\n                        changeValueMin={changeValueMin}\n                        changeStartValue={changeStartValue}\n                        maxNum={maxNum}\n                        minNum={minNum}\n                        disabledSettings={disabledSettings}\n                        message={message}\n                        errorText={errorText}\n\n                    />\n\n                    <Counter\n                        disabledCounter={disabledCounter}\n                        message={message}\n                        number={number}\n                        changeNumber={changeNumber}\n                        resetNumber={resetNumber}\n                        maxNum={maxNum}\n                        minNum={minNum}\n                        errorText={errorText}\n                    />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}